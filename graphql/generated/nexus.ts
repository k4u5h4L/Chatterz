/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Message: { // root type
    content?: string | null; // String
    from?: string | null; // String
    id?: string | null; // String
    to?: string | null; // String
  }
  Note: { // root type
    email?: string | null; // String
    list?: Array<NexusGenRootTypes['NoteDescription'] | null> | null; // [NoteDescription]
  }
  NoteDescription: { // root type
    desc?: string | null; // String
  }
  Query: {};
  Todo: { // root type
    email?: string | null; // String
    list?: Array<NexusGenRootTypes['TodoDescription'] | null> | null; // [TodoDescription]
  }
  TodoDescription: { // root type
    desc?: string | null; // String
    status?: boolean | null; // Boolean
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Message: { // field return type
    content: string | null; // String
    from: string | null; // String
    id: string | null; // String
    to: string | null; // String
  }
  Note: { // field return type
    email: string | null; // String
    list: Array<NexusGenRootTypes['NoteDescription'] | null> | null; // [NoteDescription]
  }
  NoteDescription: { // field return type
    desc: string | null; // String
  }
  Query: { // field return type
    Message: Array<NexusGenRootTypes['Message'] | null> | null; // [Message]
  }
  Todo: { // field return type
    email: string | null; // String
    list: Array<NexusGenRootTypes['TodoDescription'] | null> | null; // [TodoDescription]
  }
  TodoDescription: { // field return type
    desc: string | null; // String
    status: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Message: { // field return type name
    content: 'String'
    from: 'String'
    id: 'String'
    to: 'String'
  }
  Note: { // field return type name
    email: 'String'
    list: 'NoteDescription'
  }
  NoteDescription: { // field return type name
    desc: 'String'
  }
  Query: { // field return type name
    Message: 'Message'
  }
  Todo: { // field return type name
    email: 'String'
    list: 'TodoDescription'
  }
  TodoDescription: { // field return type name
    desc: 'String'
    status: 'Boolean'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}